#!/bin/bash

##
# This script does an rsync of specific directories to the backup server (snap).
# This is *NOT* meant as a full backup solution. The proxmox server does full
# block level backups but these should *never* be needed. These backups are only
# meant to handle server data because salt should be used to re-deploy a server
# that was lost.
#
# Note: MD5 is used to limit backup users to 32 characters.
##

fqdn="$(hostname -f)"
user=($(printf '%s' "$fqdn" | md5sum))
host='snap.lustfield.net'

declare -a backuplist
backuplist=('/etc' '/srv' '/opt')


##
# Helper Functions
##

show_msg() {
	printf '*** %s ***\n' "$@"
}

die() {
	show_msg "$1"
	release_lock
	if [[ "$2" ]]; then
		exit "$2"
	else
		exit 99
	fi
}


##
# Main Processing
##

main() {
	check_lock      || die '/run/snap.lock exists; not running backup'
	acquire_lock    || die 'Unable to acquire lock; backup not running'
	run_backup
	release_lock    || show_msg 'Unable to release lock; backup succeeded'
}


##
# Backup Functions
##

run_backup() {
	for dir in "${backuplist[@]}"; do
		[[ "$(ls -A $dir)" ]] || continue
		rdiff-backup \
			--remote-schema 'ssh -oStrictHostKeyChecking=no -C %s rdiff-backup --server' \
			--include-globbing-filelist /etc/snap.include \
			--exclude-globbing-filelist /etc/snap.exclude \
			"$dir" "$user@$host::/home/$user/rdif${dir//\//_}" ||
			show_msg "Unable to back up $dir"
	done
}


##
# Lock Management
##

check_lock() {
        test -f '/run/snap.lock' && return 1
        return 0
}

acquire_lock() {
        test -f '/run/snap.lock' && return 1
        touch '/run/snap.lock'
}

release_lock() {
        rm -f '/run/snap.lock'
}

##
# Launch Script
##

main
