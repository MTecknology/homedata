{% from 'sys/pkgs/ferm/defaults.sls' import conf with context -%}
{% from 'sys/pkgs/ferm/defaults.sls' import service_map with context -%}
{% from 'sys/pkgs/nginx/defaults.sls' import conf as ngx_conf with context -%}
{% set knock = conf.get('knock_sequence', {}) -%}
domain (ip ip6) {
    table filter {
        {% if knock %}
        # TEMPLATE: PORT KNOCKING CHAINS{% for seq in knock['authorder'] %}{% set port = seq.split('/') %}
        chain PORTAUTH_{{ loop.index }} {
            protocol {{ port[0] }} {
                mod recent name "portauth_{{ loop.index }}" set NOP;{% if loop.index != 1 %}
                mod recent name "portauth_{{ loop.index - 1 }}" remove NOP;{% endif %}
            }
            DROP;
        }{% endfor %}{% endif %}

        {% if salt.pkg.version('sshguard') %}
        chain sshguard { }
        {% endif %}

        chain INPUT {
            policy DROP;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            # allow local packet
            interface lo ACCEPT;

            # respond to ping
            proto icmp ACCEPT; 

            # allow local SSH connections
            proto tcp dport ssh saddr 10.0.0.0/8 ACCEPT;

            # package-based rules:{% for svc in service_map -%}
            {% if salt['pkg.version'](svc['package']) %}
            # package: {{ svc['package'] }}{% for rule in svc['rules'] %}
            {{ rule }};{% endfor %}{% endif %}{%- endfor %}

            {% if conf['additional_rules']['inbound'] %}
            # pillar-based rules:{% for rule in conf['additional_rules']['inbound'] %}
            {{ rule }};{% endfor %}
            {%- endif %}

	    {%- if ngx_conf['with_lb'] %}
            ## Load Balancer ##
            # allow keepalived
            proto vrrp destination (224.0.0.18 ff02::12) ACCEPT;
            {% set zones = salt.mt_zones.zones_from_profiles(vlan=grains['fqdn_ip4'][0].split('.')[2]) -%}
            {% for service, attr in zones['services'].items() -%}
            {% for ipcls, upattr in attr['address'].items() -%}
            {% if upattr.get('lb_ports', False) and upattr.get('lb_protos', False) -%}
            # LB: {{ service }}:{{ ipcls }}
            proto ({{ ' '.join(upattr.get('lb_protos', ['invalid']))
                }}) dport ({{ ' '.join(upattr.get('lb_ports', ['invalid']))
                }}) destination {{ upattr.get('addr', 'invalid') }} ACCEPT;
            {% endif %}{% endfor %}{% endfor %}{% endif %}


            {% if knock -%}
            # TEMPLATE: PORT KNOCKING{% for seq in knock['authorder'] %}{% set port = seq.split('/') %}
              {%- if loop.index == 1 %}
            proto {{ port[0] }} dport {{ port[1] }} mod recent set name portauth_1 jump PORTAUTH_{{ loop.index }};
              {%- else %}
            proto {{ port[0] }} dport {{ port[1] }} mod recent rcheck name portauth_{{ loop.index - 1 }} seconds 7 jump PORTAUTH_{{ loop.index }};
              {%- endif %}
              {%- if loop.last %}
            # Set grants after completed sequence
            proto {{ knock['grants']['proto'] }} {
                dport {{ knock['grants']['port'] }} {
                    mod recent rcheck name "portauth_{{ loop.index }}" seconds 120 ACCEPT;
                    DROP;
                }
            }
              {%- endif %}
            {%- endfor %}
            {%- endif %}
        }
        chain OUTPUT {
            policy ACCEPT;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            {% if conf['additional_rules']['outbound'] %}
            # pillar-based rules:{% for rule in conf['additional_rules']['outbound'] %}
            {{ rule }};{% endfor %}
            {%- endif %}
        }
        chain FORWARD {
            policy DROP;

            # connection tracking
            mod state state INVALID DROP;
            mod state state (ESTABLISHED RELATED) ACCEPT;

            {% if conf['additional_rules']['forward'] %}
            # pillar-based rules:{% for rule in conf['additional_rules']['forward'] %}
            {{ rule }};{% endfor %}
            {%- endif %}
        }
    }
}
